name: Create and Publish Release

on:
  push:
    tags:
      - 'v*.*.*'

jobs:
  build:
    strategy:
      matrix:
        include:
          - os: macos-13 # Intel (x64) runner
            arch: x64
          - os: macos-14 # Apple Silicon (arm64) runner
            arch: arm64
          - os: windows-latest
            arch: x64

    runs-on: ${{ matrix.os }}
    
    steps:
      - name: Check out Git repository
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install root and frontend Node.js dependencies
        run: npm install && npm install --prefix frontend

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'
          cache: 'pip'

      - name: Install Python dependencies
        run: pip install -r service/requirements.txt

      - name: Install and Prepare FFMPEG Binaries
        shell: bash
        run: |
          mkdir -p bin
          if [ "${{ runner.os }}" == "macOS" ]; then
            echo "Installing ffmpeg via Homebrew for ${{ matrix.arch }}..."
            brew install ffmpeg
            
            # Find the Homebrew prefix, which is different for arm64 vs x64
            BREW_PREFIX=$(brew --prefix)
            echo "Homebrew prefix is ${BREW_PREFIX}"
            
            # Copy the known-good binaries to our project's bin folder for packaging
            cp "${BREW_PREFIX}/bin/ffmpeg" "./bin/ffmpeg"
            cp "${BREW_PREFIX}/bin/ffprobe" "./bin/ffprobe"
            
            echo "Successfully copied ffmpeg and ffprobe from Homebrew."
            ls -la bin
            
          elif [ "${{ runner.os }}" == "Windows" ]; then
            echo "Downloading Windows static binaries..."
            # For Windows, static binaries are reliable
            curl -L https://github.com/eugeneware/ffmpeg-static/releases/download/b4.4/ffmpeg-win32-x64.exe -o bin/ffmpeg.exe
            curl -L https://github.com/eugeneware/ffmpeg-static/releases/download/b4.4/ffprobe-win32-x64.exe -o bin/ffprobe.exe
          fi
          
      - name: Build Frontend
        run: npm run build:frontend

      - name: Build Backend
        run: npm run build:backend

      - name: Build and Package Electron App
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        shell: bash
        run: |
          if [ "${{ matrix.arch }}" == "arm64" ]; then
            npm run dist -- --arm64
          else
            npm run dist -- --x64
          fi

      - name: Prepare Artifacts for Upload
        id: prep_artifacts
        shell: bash
        run: |
          if [ "${{ runner.os }}" == "macOS" ]; then
            ARTIFACT_PATH=$(ls dist/*.dmg)
            ARTIFACT_NAME="YT-Link-macOS-${{ matrix.arch }}.dmg"
          elif [ "${{ runner.os }}" == "Windows" ]; then
            ARTIFACT_PATH=$(ls dist/*.zip)
            ARTIFACT_NAME="YT-Link-Windows-${{ matrix.arch }}.zip"
          fi
          echo "ARTIFACT_PATH=${ARTIFACT_PATH}" >> $GITHUB_ENV
          echo "ARTIFACT_NAME=${ARTIFACT_NAME}" >> $GITHUB_ENV
          
      - name: Upload Artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.ARTIFACT_NAME }}
          path: ${{ env.ARTIFACT_PATH }}

  release:
    runs-on: ubuntu-latest
    needs: build
    permissions:
      contents: write
      
    steps:
      - name: Check out repository
        uses: actions/checkout@v4

      - name: Download all build artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts/

      - name: List downloaded files for verification
        run: ls -R artifacts

      - name: Create or Update GitHub Release and Upload Assets
        uses: softprops/action-gh-release@v2
        with:
          files: artifacts/**/*
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
