name: release

on:
  push:
    tags:
      - 'v*.*.*'

jobs:
  build:
    strategy:
      matrix:
        os: [macos-latest, windows-latest]
    runs-on: ${{ matrix.os }}
    steps:
      - name: Check out Git repository
        uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Install Node.js dependencies
        run: npm install

      - name: Install Python dependencies
        run: pip install -r service/requirements.txt

      - name: Install frontend dependencies
        run: npm install --prefix frontend
      
      - name: Download FFmpeg and FFprobe
        shell: bash
        run: |
          if [ "${{ runner.os }}" == "macOS" ]; then
            curl -L https://github.com/eugeneware/ffmpeg-static/releases/download/b4.4/ffmpeg-mac-arm64 -o ffmpeg
            curl -L https://github.com/eugeneware/ffmpeg-static/releases/download/b4.4/ffprobe-mac-arm64 -o ffprobe
          elif [ "${{ runner.os }}" == "Windows" ]; then
            curl -L https://github.com/eugeneware/ffmpeg-static/releases/download/b4.4/ffmpeg-win32-x64.exe -o ffmpeg.exe
            curl -L https://github.com/eugeneware/ffmpeg-static/releases/download/b4.4/ffprobe-win32-x64.exe -o ffprobe.exe
          fi
          chmod +x ffmpeg*
          mkdir -p bin
          mv ffmpeg* bin/

      - name: Build Python backend
        run: pyinstaller service/app.py --name yt-link-backend --onefile --distpath service/dist --workpath service/build --noconfirm
      
      - name: Build Electron app (without publishing)
        run: npm run dist -- --publish never

      - name: Get release version
        id: get_version
        run: echo "VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_ENV
      
      - name: Zip macOS artifact
        if: matrix.os == 'macos-latest'
        run: zip -r yt-link-macOS-arm64.zip dist/mac-arm64
        
      - name: Zip Windows artifact
        if: matrix.os == 'windows-latest'
        shell: pwsh
        run: 7z a yt-link-Windows.zip ./dist/win-unpacked

      - name: Upload artifact for release job
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.os }}
          path: |
            yt-link-macOS-arm64.zip
            yt-link-Windows.zip

  release:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Create GitHub Release and Upload Assets
        uses: softprops/action-gh-release@v1
        with:
          files: |
            artifacts/macos-latest/*
            artifacts/windows-latest/*
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
