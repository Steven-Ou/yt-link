name: release

on:
  push:
    tags:
      - 'v*.*.*'

jobs:
  release:
    strategy:
      matrix:
        os: [macos-latest, windows-latest]
    runs-on: ${{ matrix.os }}
    steps:
      - name: Check out Git repository
        uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Install Node.js dependencies
        run: npm install

      - name: Install Python dependencies
        run: pip install -r service/requirements.txt

      - name: Install frontend dependencies
        run: npm install --prefix frontend
      
      - name: Download FFmpeg and FFprobe
        run: |
          if [ "${{ runner.os }}" == "macOS" ]; then
            curl -L https://github.com/eugeneware/ffmpeg-static/releases/download/b4.4/ffmpeg-mac-arm64 -o ffmpeg
            curl -L https://github.com/eugeneware/ffmpeg-static/releases/download/b4.4/ffprobe-mac-arm64 -o ffprobe
          elif [ "${{ runner.os }}" == "Windows" ]; then
            curl -L https://github.com/eugeneware/ffmpeg-static/releases/download/b4.4/ffmpeg-win32-x64.exe -o ffmpeg.exe
            curl -L https://github.com/eugeneware/ffmpeg-static/releases/download/b4.4/ffprobe-win32-x64.exe -o ffprobe.exe
          fi
          chmod +x ffmpeg*
          mkdir -p bin
          mv ffmpeg* bin/

      - name: Build Python backend
        run: pyinstaller service/app.py --name yt-link-backend --onefile --distpath service/dist --workpath service/build --noconfirm
      
      - name: Build and package Electron app
        run: npm run dist

      - name: Get release version
        id: get_version
        run: echo ::set-output name=VERSION::${GITHUB_REF/refs\/tags\//}

      # --- macOS Artifact Upload Steps ---
      - name: Zip macOS artifact
        if: matrix.os == 'macos-latest'
        run: zip -r yt-link-macOS-arm64-${{ steps.get_version.outputs.VERSION }}.zip dist/mac-arm64
        
      - name: Upload macOS Release Asset
        if: matrix.os == 'macos-latest'
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: https://uploads.github.com/repos/${{ github.repository }}/releases/${{ steps.get_version.outputs.VERSION }}/assets
          asset_path: ./yt-link-macOS-arm64-${{ steps.get_version.outputs.VERSION }}.zip
          asset_name: yt-link-macOS-arm64-${{ steps.get_version.outputs.VERSION }}.zip
          asset_content_type: application/zip

      # --- Windows Artifact Upload Steps ---
      - name: Zip Windows artifact
        if: matrix.os == 'windows-latest'
        run: 7z a yt-link-Windows-${{ steps.get_version.outputs.VERSION }}.zip ./dist/win-unpacked
        
      - name: Upload Windows Release Asset
        if: matrix.os == 'windows-latest'
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: https://uploads.github.com/repos/${{ github.repository }}/releases/${{ steps.get_version.outputs.VERSION }}/assets
          asset_path: ./yt-link-Windows-${{ steps.get_version.outputs.VERSION }}.zip
          asset_name: yt-link-Windows-${{ steps.get_version.outputs.VERSION }}.zip
          asset_content_type: application/zip
