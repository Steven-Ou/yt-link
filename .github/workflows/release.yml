# .github/workflows/release.yml
# This is the definitive workflow that combines all previous solutions.
# It uses `working-directory` on all frontend steps to guarantee that
# commands are executed in the correct context, which is the most robust
# solution for CI/CD pathing issues.

name: Release

on:
  push:
    branches:
      - main
    paths:
      - 'frontend/**'
      - 'service/**'
      - '.github/workflows/release.yml'

jobs:
  build_and_package:
    runs-on: ${{ matrix.os }}
    
    strategy:
      matrix:
        os: [macos-latest, ubuntu-latest, windows-latest]

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: 'frontend/package-lock.json'

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
      
      - name: Install Python Dependencies
        run: pip install -r ./service/requirements.txt

      # --- THE COMBINED AND DEFINITIVE FIX ---
      # Each of the following steps explicitly sets the working directory to './frontend'.
      # This is the most reliable way to ensure the commands run in the correct place.
      
      - name: Install Frontend Dependencies
        working-directory: ./frontend
        shell: bash # Use bash for cross-platform compatibility of 'rm'
        run: |
          # Removing the lock file ensures a clean install, avoiding cache issues.
          rm -f package-lock.json
          npm install

      - name: Build Frontend
        working-directory: ./frontend
        run: npm run build
      
      - name: Package Application
        working-directory: ./frontend
        run: npm run package
        env:
          # The GH_TOKEN is required by electron-builder.
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          
      # The remaining steps rename the packaged application files for clarity.
      - name: Rename Artifact for Windows
        if: matrix.os == 'windows-latest'
        run: |
          cd frontend/dist
          $file = Get-ChildItem -Filter *.exe | Select-Object -First 1
          Rename-Item -Path $file.FullName -NewName "yt-link-windows.exe"
          
      - name: Rename Artifact for macOS
        if: matrix.os == 'macos-latest'
        run: |
          cd frontend/dist
          mv *.dmg yt-link-macos.dmg
          
      - name: Rename Artifact for Linux
        if: matrix.os == 'ubuntu-latest'
        run: |
          cd frontend/dist
          mv *.AppImage yt-link-linux.AppImage

      - name: Upload Packaged Application
        uses: actions/upload-artifact@v4
        with:
          name: yt-link-${{ matrix.os }}
          path: frontend/dist/*
          retention-days: 7
