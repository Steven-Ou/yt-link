name: Create and Publish Release

on:
  push:
    tags:
      - 'v*.*.*'

jobs:
  # --- Build Job: Creates the app for macOS and Windows ---
  build:
    strategy:
      matrix:
        os: [macos-latest, windows-latest]
    runs-on: ${{ matrix.os }}
    
    steps:
      - name: Check out Git repository
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'
          cache: 'pip'

      - name: Install root and frontend Node.js dependencies
        run: npm install && npm install --prefix frontend

      - name: Install Python dependencies
        run: pip install -r service/requirements.txt

      # --- Platform-Specific Binary Downloads ---
      - name: Download FFmpeg and FFprobe for macOS
        if: runner.os == 'macOS'
        shell: bash
        run: |
          mkdir -p bin
          curl -L https://github.com/eugeneware/ffmpeg-static/releases/download/b4.4/ffmpeg-mac-arm64 -o bin/ffmpeg
          curl -L https://github.com/eugeneware/ffmpeg-static/releases/download/b4.4/ffprobe-mac-arm64 -o bin/ffprobe
          chmod +x bin/*
          echo "Downloaded and set permissions for macOS binaries."

      - name: Download FFmpeg and FFprobe for Windows
        if: runner.os == 'Windows'
        shell: bash
        run: |
          mkdir -p bin
          curl -L https://github.com/eugeneware/ffmpeg-static/releases/download/b4.4/ffmpeg-win32-x64.exe -o bin/ffmpeg.exe
          curl -L https://github.com/eugeneware/ffmpeg-static/releases/download/b4.4/ffprobe-win32-x64.exe -o bin/ffprobe.exe
          echo "Downloaded Windows binaries."

      - name: Build Electron app
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: npm run dist

      - name: Prepare Artifacts for Upload
        id: prep_artifacts
        shell: bash
        run: |
          if [ "${{ runner.os }}" == "macOS" ]; then
            ARTIFACT_PATH=$(ls dist/*.dmg)
            ARTIFACT_NAME="YT-Link-macOS-dmg"
          elif [ "${{ runner.os }}" == "Windows" ]; then
            ARTIFACT_PATH=$(ls dist/*.zip)
            ARTIFACT_NAME="YT-Link-Windows-zip"
          fi
          echo "ARTIFACT_PATH=${ARTIFACT_PATH}" >> $GITHUB_ENV
          echo "ARTIFACT_NAME=${ARTIFACT_NAME}" >> $GITHUB_ENV
          
      - name: Upload Artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.ARTIFACT_NAME }}
          path: ${{ env.ARTIFACT_PATH }}

  # --- Release Job: Creates the final GitHub Release ---
  release:
    runs-on: ubuntu-latest
    needs: build
    permissions:
      contents: write
      
    steps:
      - name: Check out repository
        uses: actions/checkout@v4

      - name: Download all build artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts/

      - name: List downloaded files for verification
        run: ls -R artifacts

      # --- BUG FIX: Update the action to v2, which handles existing releases ---
      - name: Create or Update GitHub Release and Upload Assets
        uses: softprops/action-gh-release@v2
        with:
          # This version automatically updates the release if the tag already exists
          files: |
            artifacts/YT-Link-macOS-dmg/*
            artifacts/YT-Link-Windows-zip/*
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
