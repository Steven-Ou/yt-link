name: Build & Release

on:
  push:
    tags:
      - 'v*.*.*'

jobs:
  build-and-release:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [macos-latest, windows-latest]
    
    permissions:
      contents: write

    steps:
      - name: Check out Git repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: 'frontend/package-lock.json'
      
      - name: Install FFmpeg (macOS)
        if: runner.os == 'macOS'
        run: brew install ffmpeg
        
      - name: Install FFmpeg (Windows)
        if: runner.os == 'Windows'
        run: choco install ffmpeg
      
      - name: Create Python virtual environment and install dependencies
        run: |
          cd service
          python -m venv venv
          # This robust command works for both Windows and Mac shells
          ./venv/bin/python -m pip install -r requirements.txt || ./venv/Scripts/python.exe -m pip install -r requirements.txt
          ./venv/bin/python -m pip install pyinstaller || ./venv/Scripts/python.exe -m pip install pyinstaller
        shell: bash

      - name: Build Python Backend with PyInstaller
        run: |
          cd service
          if [[ "${{ runner.os }}" == "Windows" ]]; then
            # Windows command
            FFMPEG_PATH=$(where ffmpeg)
            YTDLP_PATH=./venv/Scripts/yt-dlp.exe
            PYTHON_EXEC=./venv/Scripts/python.exe
          else
            # macOS command
            FFMPEG_PATH=$(which ffmpeg)
            YTDLP_PATH=./venv/bin/yt-dlp
            PYTHON_EXEC=./venv/bin/python
          fi
          
          echo "Platform: ${{ runner.os }}"
          echo "Python Executable: $PYTHON_EXEC"
          echo "yt-dlp Path: $YTDLP_PATH"
          echo "FFmpeg Path: $FFMPEG_PATH"

          $PYTHON_EXEC -m PyInstaller --onefile --noconsole --clean \
            --add-binary "$YTDLP_PATH:." \
            --add-binary "$FFMPEG_PATH:." \
            app.py
        shell: bash

      - name: Install Frontend Dependencies
        run: npm ci
        working-directory: ./frontend

      - name: Build and Package Electron App
        run: npm run electron:build -- --publish always
        working-directory: ./frontend
        env:
          APPLE_ID: ${{ secrets.APPLE_ID }}
          APPLE_APP_PASSWORD: ${{ secrets.APPLE_APP_PASSWORD }}
          APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
          IS_ELECTRON: 'true'
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload Release Artifacts
        uses: softprops/action-gh-release@v2
        with:
          files: |
            frontend/dist/*.dmg
            frontend/dist/*.zip
            frontend/dist/*.exe
            frontend/dist/*.blockmap
