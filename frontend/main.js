// --- ELECTRON AND NODE.JS IMPORTS ---
// 'app' controls the application's event lifecycle.
// 'BrowserWindow' creates and manages application windows.
const { app, BrowserWindow } = require('electron'); 
// 'path' provides utilities for working with file and directory paths.
const path = require('path');
// 'spawn' is used to launch child processes, in this case our Python backend.
const { spawn } = require('child_process');

// --- GLOBAL VARIABLES ---
// 'mainWindow' will hold the reference to the main application window.
let mainWindow;
// 'backendProcess' will hold the reference to our spawned Python backend process.
let backendProcess;

// --- MAIN WINDOW CREATION ---
// This function creates the main application window and loads the frontend.
function createWindow() {
  // Create a new browser window with specified dimensions and web preferences.
  mainWindow = new BrowserWindow({
    width: 650,  // The initial width of the window in pixels.
    height: 730, // The initial height of the window in pixels.
    webPreferences: {
      // 'preload.js' runs in a privileged context before the web page loads.
      // It's used to securely expose Node.js functionality to the renderer process.
      preload: path.join(__dirname, 'preload.js'),
      // 'contextIsolation' is a security feature that ensures the preload script
      // and the renderer's JavaScript run in separate contexts.
      contextIsolation: true,
      // 'nodeIntegration' is disabled for security, preventing the renderer
      // from having direct access to Node.js APIs.
      nodeIntegration: false,
    },
  });

  // --- LOADING THE FRONTEND ---
  // Check if the app is running in a packaged (production) or development environment.
  if (app.isPackaged) {
    // In a packaged app, load the static HTML file generated by 'next export'.
    mainWindow.loadFile(path.join(__dirname, 'out', 'index.html'));
  } else {
    // In development, load the URL of the Next.js development server.
    mainWindow.loadURL('http://localhost:3000');
    // Also, open the developer tools automatically for debugging.
    mainWindow.webContents.openDevTools();
  }
}

// --- PYTHON BACKEND LAUNCHER ---
// This function is responsible for starting the Python backend executable.
function startBackend() {
  // The backend should only be started by Electron when it's a packaged application.
  if (!app.isPackaged) {
    console.log('DEV MODE: Backend should be started manually.');
    return; // Do not start the backend in development mode.
  }

  // --- LOCATING THE BACKEND EXECUTABLE ---
  // 'process.resourcesPath' is the correct and reliable way to get the path
  // to the resources directory in a packaged Electron app.
  const resourcesPath = process.resourcesPath;
  // The backend executable is located in a 'backend' folder within the resources directory.
  const backendDir = path.join(resourcesPath, 'backend');
  // The name of the executable differs between Windows and other platforms.
  const backendExecutableName = process.platform === 'win32' ? 'yt-link-backend.exe' : 'yt-link-backend';
  // Construct the full path to the executable.
  const backendPath = path.join(backendDir, backendExecutableName);

  // Log the paths for debugging purposes.
  console.log('--- LAUNCHING BACKEND ---');
  console.log(`Resource Path: ${resourcesPath}`);
  console.log(`Full Backend Path: ${backendPath}`);
  
  try {
    // Use 'spawn' to launch the backend executable as a child process.
    backendProcess = spawn(backendPath);

    // --- ENHANCED LOGGING FOR DEBUGGING ---
    // These listeners will capture any output from the backend process,
    // which is crucial for debugging runtime errors.
    
    // Listen for any standard output (print statements, logs) from the backend.
    backendProcess.stdout.on('data', (data) => {
      console.log(`BACKEND_STDOUT: ${data.toString()}`);
    });

    // Listen for any error output from the backend.
    backendProcess.stderr.on('data', (data) => {
      console.error(`BACKEND_STDERR: ${data.toString()}`);
    });

    // Listen for an 'error' event, which occurs if the process fails to spawn.
    backendProcess.on('error', (err) => {
      console.error('BACKEND_ERROR: Failed to start backend process.', err);
    });

    // Listen for the 'close' event, which tells us when the backend process has exited.
    backendProcess.on('close', (code) => {
      console.log(`BACKEND_CLOSE: Backend process exited with code ${code}`);
    });
    // --- END OF LOGGING ---

  } catch (error) {
    // Catch any critical errors that occur during the 'spawn' call itself.
    console.error('SPAWN_ERROR: Critical error spawning backend process.', error);
  }
}

// --- ELECTRON APP LIFECYCLE EVENTS ---

// 'ready' event: Fired when Electron has finished initialization.
// This is the main entry point to start the application's logic.
app.on('ready', () => {
  startBackend(); // Start the Python backend.
  createWindow(); // Create the main application window.
});

// 'window-all-closed' event: Fired when all application windows have been closed.
app.on('window-all-closed', () => {
  // On macOS, it's common for applications to stay active until the user explicitly quits.
  // So, we only quit the app if the platform is not macOS (darwin).
  if (process.platform !== 'darwin') {
    app.quit();
  }
});

// 'will-quit' event: Fired before the application starts closing its windows.
// This is the ideal place to clean up resources.
app.on('will-quit', () => {
  // If the backend process exists, terminate it.
  if (backendProcess) {
    console.log('Terminating backend process...');
    backendProcess.kill();
  }
});

// 'activate' event (macOS specific): Fired when the application is activated,
// typically by clicking on the app's dock icon when no windows are open.
app.on('activate', () => {
  // Re-create a window in the app if the 'activate' event is received and
  // no other windows are open.
  if (BrowserWindow.getAllWindows().length === 0) {
    createWindow();
  }
});
