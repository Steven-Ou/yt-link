// frontend/main.js

/**
 * @file This is the main process file for the Electron application.
 * It's responsible for creating the application window, managing the application's lifecycle,
 * and handling all inter-process communication (IPC) from the renderer process (the React app).
 */

// Import necessary modules from Electron.
// app: Manages the application's event lifecycle.
// BrowserWindow: Creates and controls browser windows.
// ipcMain: Handles asynchronous and synchronous messages sent from the renderer process.
// dialog: Allows for the display of native system dialogs (e.g., for opening files or directories).
// shell: Manages files and URLs using their default applications.
const { app, BrowserWindow, ipcMain, dialog, shell } = require('electron');

// Import Node.js built-in modules.
const path = require('path');
const { spawn } = require('child_process'); // Used to run the Python backend as a separate process.

// Import third-party Node.js modules.
const portfinder = require('portfinder'); // Helps find an open port to run the backend on.
const fetch = require('node-fetch');      // Used to make HTTP requests to the Python backend.

// --- Global variables to hold references to the main window and backend process ---
let mainWindow;
let pythonProcess;
let pythonPort;

/**
 * Creates the main application window.
 */
function createWindow() {
  // Initialize a new browser window.
  mainWindow = new BrowserWindow({
    width: 960,
    height: 720,
    webPreferences: {
      // The preload script is crucial for secure IPC. It runs in a privileged context
      // and exposes a controlled API to the renderer process via `contextBridge`.
      preload: path.join(__dirname, 'preload.js'),
      // Security best practices for Electron applications.
      webSecurity: true,       // Disables insecure features.
      contextIsolation: true,  // Ensures preload scripts and the renderer run in separate contexts.
      nodeIntegration: false,  // Prevents the renderer from having direct access to Node.js APIs.
    },
  });
  
  // Check if the application is running in a development environment or packaged.
  const isDev = !app.isPackaged;

  if (isDev) {
    // In development, load the URL of the Next.js dev server.
    mainWindow.loadURL('http://localhost:3000');
    // Automatically open the developer tools for debugging.
    mainWindow.webContents.openDevTools({ mode: 'detach' });
  } else {
    // In production (after packaging), load the static HTML file generated by `next build`.
    mainWindow.loadFile(path.join(__dirname, 'out/index.html'));
  }
}

/**
 * Starts the Python backend server as a child process.
 */
const startPythonBackend = async () => {
  // Find an available network port to avoid conflicts with other applications.
  pythonPort = await portfinder.getPortPromise();
  
  const isDev = !app.isPackaged;

  // Determine the correct name for the backend executable based on the operating system.
  const backendExecutableName = process.platform === 'win32' ? 'yt-link-backend.exe' : 'yt-link-backend';
  
  // Determine the path to the backend executable.
  // In development, we run the Python script directly. The path must go up one level from `frontend` to the project root.
  // In production, we run the packaged executable from the resources directory.
  const backendPath = isDev
    ? path.join(__dirname, '../service/app.py') // <-- THIS IS THE CORRECTED PATH
    : path.join(process.resourcesPath, 'backend', backendExecutableName);

  const command = isDev ? 'python' : backendPath;
  const args = [pythonPort.toString()];
  
  console.log(`Starting backend with command: "${command}" and script: ${backendPath} on port: ${pythonPort}`);

  // When in development, the 'python' command needs the script path as an argument.
  // When in production, the executable is run directly with its arguments.
  const spawnArgs = isDev ? [backendPath, ...args] : args;
  
  // Spawn the child process for the backend.
  pythonProcess = spawn(command, spawnArgs);

  // Log any output from the Python process's standard output for debugging.
  pythonProcess.stdout.on('data', (data) => {
    console.log(`Python stdout: ${data}`);
  });

  // Log any errors from the Python process's standard error.
  pythonProcess.stderr.on('data', (data) => {
    console.error(`Python stderr: ${data}`);
  });

  // Log when the Python process closes to monitor its status.
  pythonProcess.on('close', (code) => {
    console.log(`Python process exited with code ${code}`);
  });
};

// --- Electron App Lifecycle & IPC Handlers ---

// This method is called when Electron has finished initialization.
app.whenReady().then(async () => {
  // --- IPC Handler for selecting a download directory ---
  // Listens for the 'select-directory' message from the renderer.
  ipcMain.handle('select-directory', async () => {
    const result = await dialog.showOpenDialog(mainWindow, { properties: ['openDirectory'] });
    // Returns the selected path or null if the dialog was canceled.
    return result.canceled ? null : result.filePaths[0];
  });
  
  // --- Generic function to forward job requests to the Python backend ---
  const startJob = async (endpoint, data) => {
      if (!pythonPort) throw new Error('Python backend is not available.');
      const url = `http://127.0.0.1:${pythonPort}/${endpoint}`;
      console.log(`Forwarding job to Python: ${url} with data:`, data);
      
      try {
        const response = await fetch(url, {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify(data),
        });

        if (!response.ok) {
            const errorText = await response.text();
            console.error(`Python API Error (${response.status}): ${errorText}`);
            throw new Error(`Python API Error: ${response.statusText} - ${errorText}`);
        }
        return await response.json();
      } catch (error) {
        console.error(`Error occurred in handler for '${endpoint}':`, error);
        // Re-throw the error so the renderer process knows the operation failed.
        throw error;
      }
  };

  // --- IPC Handlers for specific job types ---
  // These handlers are linked to the functions exposed in preload.js.
  ipcMain.handle('start-single-mp3-job', (event, data) => startJob('start-single-mp3-job', data));
  ipcMain.handle('start-playlist-zip-job', (event, data) => startJob('start-playlist-zip-job', data));
  ipcMain.handle('start-combine-playlist-mp3-job', (event, data) => startJob('start-combine-playlist-mp3-job', data));
  
  // --- IPC Handler for checking job status ---
  ipcMain.handle('get-job-status', async (event, jobId) => {
    if (!pythonPort) throw new Error('Python backend is not available.');
    const url = `http://127.0.0.1:${pythonPort}/job-status/${jobId}`;
    const response = await fetch(url);
    return await response.json();
  });

  // --- IPC Handler for opening a folder ---
  // Uses the 'shell' module to open a folder path in the OS's default file manager.
  ipcMain.handle('open-folder', (event, folderPath) => {
    if (folderPath) {
      console.log(`Opening folder: ${folderPath}`);
      shell.openPath(folderPath);
    } else {
      console.warn("Attempted to open a folder with no path provided.");
    }
  });

  // Start the backend server before creating the application window.
  await startPythonBackend();
  createWindow();

  // On macOS, re-create the window if the dock icon is clicked and no other windows are open.
  app.on('activate', () => {
    if (BrowserWindow.getAllWindows().length === 0) createWindow();
  });
});

// Quit the app when all windows are closed (this is standard behavior on Windows & Linux).
app.on('window-all-closed', () => {
  if (process.platform !== 'darwin') app.quit();
});

// --- Cleanup: Terminate the Python backend when the Electron app quits ---
app.on('will-quit', () => {
  if (pythonProcess) {
    console.log('Terminating Python backend process.');
    pythonProcess.kill();
  }
});
