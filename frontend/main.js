/**
 * @file This is the main process file for the Electron application.
 * It's responsible for creating the application window and managing its lifecycle.
 */

const { app, BrowserWindow, ipcMain, dialog } = require('electron');
const path = require('path');

// Keep a global reference of the window object, otherwise the window will
// be closed automatically when the JavaScript object is garbage collected.
let mainWindow;

// Check if the app is running in development mode or as a packaged application.
const isDev = !app.isPackaged;

function createWindow() {
  // Create the browser window with specified dimensions and web preferences.
  mainWindow = new BrowserWindow({
    width: 1080,
    height: 720,
    webPreferences: {
      // The preload script is crucial for secure IPC. It runs in a privileged context
      // and exposes a controlled API to the renderer process (your React app).
      preload: path.join(__dirname, 'preload.js'),
      // These settings are important for security.
      webSecurity: true,
      contextIsolation: true, // Keep main and renderer processes isolated.
      nodeIntegration: false,  // Prevent renderer process from accessing Node.js APIs directly.
    },
  });

  // --- Load the application content ---
  if (isDev) {
    // In development, we load from the Next.js dev server.
    // A retry mechanism is added here to handle the race condition where Electron
    // might start before the Next.js server is ready to accept connections.
    const devUrl = 'http://localhost:3000';
    
    const loadDevUrl = () => {
      console.log(`Attempting to load URL: ${devUrl}`);
      mainWindow.loadURL(devUrl).catch((err) => {
        // If loading fails, log the error and schedule a retry.
        console.error(`Failed to load ${devUrl}. Retrying in 2 seconds...`, err.message);
        setTimeout(loadDevUrl, 2000); // Retry after a 2-second delay
      });
    };

    // Start the initial attempt to load the URL.
    loadDevUrl();
    
    // Automatically open the browser's developer tools for debugging.
    mainWindow.webContents.openDevTools({ mode: 'detach' });

  } else {
    // In production, load the static HTML file generated by the `next build` and `next export` process.
    // Your build script should be configured to output to an 'out' directory.
    mainWindow.loadFile(path.join(__dirname, 'out/index.html'));
  }

  // This event is fired when the window is closed.
  mainWindow.on('closed', function () {
    // Dereference the window object to allow for garbage collection.
    mainWindow = null;
  });
}

// --- IPC (Inter-Process Communication) Handlers ---
// These handlers allow your renderer process (the React app) to securely
// communicate with the main process to perform actions that require Node.js access.

// Example: An IPC handler for letting the user select a directory.
ipcMain.handle('select-directory', async () => {
  if (!mainWindow) return null;
  const result = await dialog.showOpenDialog(mainWindow, {
    properties: ['openDirectory'],
  });
  // Return the selected path, or null if the user canceled the dialog.
  return result.canceled ? null : result.filePaths[0];
});

// You can add more ipcMain.handle calls here for other native functionalities
// your app might need, such as saving files, opening links in the browser, etc.


// --- Electron App Lifecycle Events ---

// This method is called once Electron has finished initialization
// and is ready to create browser windows.
app.whenReady().then(createWindow);

// Quit the app when all windows are closed (standard behavior on Windows & Linux).
app.on('window-all-closed', function () {
  // On macOS, it's common for apps to stay open even after all windows are
  // closed, so we don't quit the app unless the platform is not 'darwin'.
  if (process.platform !== 'darwin') {
    app.quit();
  }
});

app.on('activate', function () {
  // On macOS, re-create a window if the app is activated (e.g., by clicking the
  // dock icon) and there are no other windows open.
  if (BrowserWindow.getAllWindows().length === 0) {
    createWindow();
  }
});
